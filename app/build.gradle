apply plugin: 'com.android.application'
apply plugin: 'channel'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions' //如有直接Id使用空间
apply plugin: 'kotlin-kapt' //Kotlin Annotation processing tool


android {
    compileSdkVersion Integer.parseInt(compile_sdk_version)
    buildToolsVersion build_tools_version

    defaultConfig {
        applicationId "com.yuchengren.demo"
        minSdkVersion min_sdk_version
        targetSdkVersion target_sdk_version
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        debug{
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro', 'proguard-dagger2.pro',
                    'proguard-eventbus.pro', 'proguard-glide.pro',
                    'proguard-okhttp3.pro', 'proguard-greendao.pro',
                    'proguard-alipay.pro', 'proguard-push.pro',
                    'proguard-qiyu.pro', 'proguard-arouter.pro',
                    'proguard-asr.pro', 'proguard-baidumap.pro',
                    'proguard-encrypt.pro'
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro', 'proguard-dagger2.pro',
                    'proguard-eventbus.pro', 'proguard-glide.pro',
                    'proguard-okhttp3.pro', 'proguard-greendao.pro',
                    'proguard-alipay.pro', 'proguard-push.pro',
                    'proguard-qiyu.pro', 'proguard-arouter.pro',
                    'proguard-asr.pro', 'proguard-baidumap.pro',
                    'proguard-encrypt.pro'
        }
    }

    sourceSets {
        main{
            jni.srcDirs = [] //disable automatic ndk-build call 禁用gradle默认的ndk-build，防止AS自己生成android.mk编译jni工程
            jniLibs.srcDirs = ['src/main/libs','src/main/jniLibs'] //设置目标的so存放路径，也就是组装到apk中的so路径
            //jniLibs.srcDir "src/main/libs"
        }
    }
}

dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    implementation "$kotlin_group:kotlin-stdlib-jdk7:$kotlin_version"
    api 'io.reactivex.rxjava2:rxjava:2.1.7'
    api 'io.reactivex.rxjava2:rxandroid:2.0.1'
    api "$android_support:appcompat-v7:$android_support_version"
    api "com.android.support.constraint:constraint-layout:$constraint_layout_version"
    api project(':module-main')
    api project(':module-photo')
    implementation "$android_support:support-v4:$android_support_version"

    api "$glide_group:annotations:$glide_version"
    annotationProcessor "$glide_group:compiler:$glide_version"
}

configurations.all {
    //强制统一support库版本
    resolutionStrategy.eachDependency { dependency ->
        if (dependency.requested.group == "$android_support" && !dependency.requested.name.contains('multidex')) {
            dependency.useVersion("$android_support_version")
        }
    }
}
